#+STARTUP: hideall

* use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

* helm
Used for auto-completion in finding files, and a bunch of other cool stuff
** general configuration
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (require 'helm-config)
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c h o") 'helm-occur)
  (global-set-key (kbd "C-c h g") 'helm-google-suggest)
  (global-set-key (kbd "C-c h M-:") 'helm-eval-expression-with-eldoc)
  (require 'shell)
  (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-inside-p           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-scroll-amount                    8
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t
        helm-autoresize-max-height 0
        helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)
  (helm-mode 1)
  (use-package helm-file-preview
    :ensure t
    :config
    (setq helm-file-preview-only-when-line-numbers t)
    (setq helm-file-preview-preview-only t)
    (helm-file-preview-mode 1)))
#+END_SRC
** helm-c-yasnippet
#+BEGIN_SRC emacs-lisp
;; (use-package helm-c-yasnippet
;;   :ensure t
;;   :config
;;   (setq helm-yas-space-match-any-greedy t)
;;   (global-set-key (kbd "C-c y") 'helm-yas-complete))
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :ensure t)
#+END_SRC

* programming initialization
Load the programming init file
#+BEGIN_SRC emacs-lisp
(org-babel-load-file (concat user-emacs-directory "programminginit.org"))
#+END_SRC

* ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("magit" (mode . magit-mode))
               ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (or

                        (mode . mu4e-compose-mode)
                        (name . "\*mu4e\*")
                        ))
               ("programming" (or
                               (mode . clojure-mode)
                               (mode . clojurescript-mode)
                               (mode . python-mode)
                               (mode . c++-mode)
                               (mode . c-mode)
                               (mode . web-mode)
                               (mode . java-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

(setq ibuffer-show-empty-filter-groups nil)

(setq ibuffer-expert t)
#+END_SRC


* web stuff
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode) t)
  (setq web-mode-engines-alist
        '(("django"    . "\\.html\\'")))
  (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-quoting t))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (tool-bar-mode -1)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (setq visible-bell 1)
    (toggle-scroll-bar -1)
    (show-paren-mode 1)
    (setq electric-pair-preserve-balance nil)
    (global-hl-line-mode 1)
    (save-place-mode t)
    (setq-default indent-tabs-mode nil)
    (put 'erase-buffer 'disabled nil)
    (put 'narrow-to-region 'disabled nil)
    (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))

  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)    
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  (set-language-environment "UTF-8")

#+END_SRC
Cursor type
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box)
  (set-cursor-color "#AEFF40")
  (set-face-attribute 'region nil 
  :background "#cc02bb" 
  :foreground "#d3e603")
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (global-set-key "\C-r" 'query-replace-regexp)
  (global-visual-line-mode t)
  (menu-bar-mode -1)
#+END_SRC

* miscellaneous small packages
** nyan mode
used for showing position in the current buffer
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :ensure t
  :config 
  (nyan-mode 1))
#+END_SRC

** golden ratio mode
used for automatically resizing buffer sizes to be prettier
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :config 
  (golden-ratio-mode 1))
#+END_SRC

** smart parentheses (?)
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t)
#+END_SRC

** duplicate-thing
Used to duplicate current line
#+BEGIN_SRC emacs-lisp
(use-package duplicate-thing
  :ensure t
  :config
  (global-set-key (kbd "M-c") 'duplicate-thing))
#+END_SRC

** misc
#+BEGIN_SRC emacs-lisp
(require 'misc)
(autoload 'zap-up-to-char "misc" 'interactive)
(global-set-key (kbd "M-z") 'zap-up-to-char)
#+END_SRC

** expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Sudo edit
Used for editing files that need sudo privileges
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t)
#+END_SRC

** beacon
When cursor jumps, new cursor position is highlighted so that you dont loose the cursor
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  (setq beacon-color "#00aa33"))
#+END_SRC

** multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd "C-c C-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

** which key
Used if you dont remember what the next keystroke in the command is, 
it gives you a small prompt with all possible next key strokes
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config (which-key-mode))
#+END_SRC

** ansi color
#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :ensure t
  :config
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on))
#+END_SRC

** uniquify
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-separator "/"               ;; The separator in buffer names.
      uniquify-buffer-name-style 'forward) ;; names/in/this/style
#+END_SRC

** try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
** EasyPG (encrypting files)
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(setq epa-file-select-keys nil)
(setq epa-file-encrypt-to '("nikhilc1527@gmail.com"))
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
(setq password-cache-expiry 15)
#+END_SRC

** ace-jump-mode
#+BEGIN_SRC emacs-lisp
;; (use-package avy
;;   :ensure t
;;   (global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-1))
#+END_SRC

** undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode t))
#+END_SRC



* custom made functions
Clear the buffer in eshell mode
#+BEGIN_SRC emacs-lisp
;; (defun save-compile-dwm ()
;;   (when (eq (symbol-value buffer-file-name) "/home/nikhil/.local/src/dwm/config.h")
;;     (start-process "make && plz make install && kill -HUP $(pgrep -u $USER \"\bdwm$\"")
;;     )
;;   )
;; (add-hook 'after-save-hook 'save-compile-dwm)
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
(setf custom-safe-themes t)
(use-package gruvbox-theme :ensure t)
(load-theme 'gruvbox-dark-hard)
#+END_SRC

