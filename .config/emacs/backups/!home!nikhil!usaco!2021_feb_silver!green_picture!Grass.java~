import java.util.Arrays;
import java.util.Scanner;

public class Grass {

  private static long ans;

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = Integer.parseInt(scanner.nextLine());
    int[][] grass = new int[n][];

    for(int i = 0; i < n; i ++) {
      grass[i] = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    }

    for(int i = 0; i < grass.length; i ++) {
      for(int j = 0; j < grass.length; j ++) {
        if (grass[i][j] == 100) {
          fill(i, j, i, j, grass, new boolean[n][n], 0, 0);
        }
      }
    }

    System.out.println(ans + 2);
  }

  private static void fill(int origI, int origJ, int i, int j, int[][] grass, boolean[][] visited, int up, int side) {
    if(checkOutOfBounds(grass, i, j) || visited[i][j] || grass[i][j] < 100) {
      return;
    }

    visited[i][j] = true;

    if(up == 0 && side == 0);
    else if (up > 0) {
      if(side > 0) {
        if (checkSmaller(grass, i, origJ, j, origI)) {
          return;
        }
      } else {
        if (checkSmaller(grass, i, j, origI, origJ)) {
          return;
        }
      }
    } else {
      if (side > 0) {
        if (checkSmaller(grass, origI, origJ, i, j)) {
          return;
        }
      } else {
        if (checkSmaller(grass, origI, j, origJ, i)) {
          return;
        }
      }
    }

    ans ++;

    fill(origI, origJ, i + 1, j + 1, grass, visited, up - 1, side + 1);
    fill(origI, origJ, i + 1, j, grass, visited, up - 1, side);
    fill(origI, origJ, i + 1, j - 1, grass, visited, up - 1, side - 1);
    fill(origI, origJ, i, j - 1, grass, visited, up, side - 1);
    fill(origI, origJ, i - 1, j - 1, grass, visited, up + 1, side - 1);
    fill(origI, origJ, i - 1, j, grass, visited, up + 1, side);
    fill(origI, origJ, i - 1, j + 1, grass, visited, up + 1, side + 1);
    fill(origI, origJ, i, j + 1, grass, visited, up, side + 1);
  }

  private static int subgrids(int n, int m) {
    return (m * n * (n + 1) * (m + 1)) / 4;
  }

  private static boolean checkSmaller(int[][] grass, int i, int j, int l, int m) {
    for( ; i < m; i ++) {
      for ( ; j < l; j ++) {
        if(grass[i][j] < 100) {
          return true;
        }
      }
    }

    return false;
  }

  private static boolean checkOutOfBounds(int[][] grass, int i, int j) {
    return i < 0 || i >= grass.length || j < 0 || j >= grass.length;
  }

}

// 57  120 87
// 200 100 150
// 2   141 135