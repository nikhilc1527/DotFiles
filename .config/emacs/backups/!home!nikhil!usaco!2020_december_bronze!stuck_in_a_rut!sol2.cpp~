#include <bits/stdc++.h>

struct Cow {
  int i;
  int x, y;
  // char dir;
  int stop;
};

struct Intersection {
  int i, j;
  int distance;
};

int main(int argc, char **argv) {
  // freopen("input.txt", "r", stdin);
  // freopen("output.txt", "w", stdout);
  
  int N;
  std::cin >> N;
  std::vector<Cow> northCows, eastCows;
  // std::vector<Cow> cows;
  for (int i = 0; i < N; ++i) {
    char dir;
    int x, y;
    std::cin >> dir >> x >> y;
    // if (dir == 'E') {
    //   east.emplace_back();
    //   east[east.size() - 1] = { x, y, i, dir, -1 };
    // } else {
    //   north.emplace_back();
    //   north[east.size() - 1] = { x, y, i, dir, -1 };      
    // }
    // cows.push_back(Cow{i, x, y, dir, INT_MAX});
    if (dir == 'E') {
      eastCows.push_back(Cow{i, x, y, INT_MAX});
    } else {
      northCows.push_back(Cow{i, x, y, INT_MAX});
    }
  }

  // std::sort(northCows.begin(), northCows.end(),
  //           [](auto a, auto b) { return a.x < b.x; });
  //   std::sort(eastCows.begin(), eastCows.end(),
  //           [](auto a, auto b) { return a.y < b.y; });

  std::vector<Intersection> crosses;
  for (int i = 0; i < eastCows.size(); ++i) {
    for (int j = 0; j < northCows.size(); ++j) {
      Cow &east = eastCows[i], &north = northCows[j];

      // if eastward cow is right of north cow or north cow is on top of east cow they can never cross
      if (east.x > north.x || north.y > east.y) continue;

      // if they cross when both get to the same point at the same time then theres nothing we need to check
      if (north.x - east.x == east.y - north.y) continue;

      crosses.push_back(
          Intersection{i, j, std::min(north.x - east.x, east.y - north.y)});
    }
  }

  std::sort(crosses.begin(), crosses.end(), [](auto a, auto b) {
    return a.distance < b.distance;});
  
      // find intersections

  
  //   for (int i = 0; i < eastCows.size(); ++i) {
  //     for (int j = 0; j < northCows.size(); ++j) {
  //     // if both cows are going the same way then they cannot ever cross
  //     // if (cows[i].dir == cows[j].dir) continue;
  //     // Cow *east = &cows[i], *north = &cows[j];
  //     Cow &east = eastCows[i], &north = northCows[j];
  //     // if (east->dir == 'N') {
  //     //   east = &cows[j];
  //     //   north = &cows[i];
  //     // }

  //     // if eastward cow is right of north cow or north cow is on top of east cow they can never cross
  //     if (east.x >= north.x || north.y >= east.y) continue;

  //     // if they cross when both get to the same point at the same time then theres nothing we need to check
  //     if (north.x - east.x == east.y - north.y) continue;

  //     // east crosses the crossing point first  
  //     if (north.x - east.x < east.y - north.y) {
  //       // if east has already stopped before that then theres nothing to check
  //       if (east.stop <= north.x) continue;

  //       // eastward cow stops the northward cow
  //       north.stop = east.y;
  //     } else {
  //       // if north has already stopped before that then theres nothing to check
  //       if (north.stop <= east.y) continue;

  //       // eastward cow stops the northward cow
  //       east.stop = north.x;
  //     }
  //     }
  // }

  for (int i = 0; i < crosses.size(); ++i) {
    Cow &east = eastCows[crosses[i].i], &north = northCows[crosses[i].j];
      // east crosses the crossing point first  
      if (north.x - east.x < east.y - north.y) {
        // if east has already stopped before that then theres nothing to check
        if (east.stop < north.x) continue;

        // eastward cow stops the northward cow
        north.stop = east.y;
      } else if (north.x - east.x > east.y - north.y) {
        // if north has already stopped before that then theres nothing to check
        if (north.stop < east.y)
          continue;

        // eastward cow stops the northward cow
        east.stop = north.x;
      }
  }

  //   for (int j = 0; j < northCows.size(); ++j) {
  //     for (int i = 0; i < eastCows.size(); ++i) {
  //     // if both cows are going the same way then they cannot ever cross
  //     // if (cows[i].dir == cows[j].dir) continue;
  //     // Cow *east = &cows[i], *north = &cows[j];
  //     Cow &east = eastCows[i], &north = northCows[j];
  //     // if (east->dir == 'N') {
  //     //   east = &cows[j];
  //     //   north = &cows[i];
  //     // }

  //     // if eastward cow is right of north cow or north cow is on top of east cow they can never cross
  //     if (east.x >= north.x || north.y >= east.y) continue;

  //     // if they cross when both get to the same point at the same time then theres nothing we need to check
  //     if (north.x - east.x == east.y - north.y) continue;

  //     // east crosses the crossing point first  
  //     if (north.x - east.x < east.y - north.y) {
  //       // if east has already stopped before that then theres nothing to check
  //       if (east.stop <= north.x) continue;

  //       // eastward cow stops the northward cow
  //       north.stop = east.y;
  //     } else {
  //       // if north has already stopped before that then theres nothing to check
  //       if (north.stop <= east.y) continue;

  //       // eastward cow stops the northward cow
  //       east.stop = north.x;
  //     }
  //     }
  // }

    std::vector<std::string> res(N);

  // for (int i = 0; i < cows.size(); ++i) {
  //   if (cows[i].stop == INT_MAX) std::cout << "Infinity" << "\n";
  //   else if (cows[i].dir == 'E') {
  //     std::cout << (cows[i].stop - cows[i].x) << "\n";
  //   } else {
  //     std::cout << (cows[i].stop - cows[i].y) << "\n";
  //   }
  // }

  for (int i = 0; i < northCows.size(); ++i) {
    if (northCows[i].stop == INT_MAX) res[northCows[i].i] = "Infinity";
    else res[northCows[i].i] = std::to_string(northCows[i].stop - northCows[i].y);
  }

  for (int i = 0; i < eastCows.size(); ++i) {
    if (eastCows[i].stop == INT_MAX)
      res[eastCows[i].i] = "Infinity";
    else
      res[eastCows[i].i] = std::to_string(eastCows[i].stop - eastCows[i].x);
  }

  for (int i = 0; i < res.size(); ++i) {
    std::cout << res[i] << "\n";
  }

  return 0;
}
