from engine import train_one_epoch, evaluate
import transforms as T
import utils
from torchvision.models.detection.mask_rcnn import MaskRCNNPredictor
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
import torchvision
import os
import numpy as np
import torch
import torch.utils.data
from PIL import Image
import glob
import json


class ChessDataset(torch.utils.data.Dataset):
  def __init__(self, root, transforms=None):
      self.root = root
      self.transforms = transforms
      # load all image files, sorting them to
      # ensure that they are aligned
      self.imgs = list(sorted(glob.glob(os.path.join(root, "*.jpg"))))
      with open(os.path.join(root, "_annotations.coco.json"), 'r') as myfile:
        data = myfile.read()

      self.obj = json.loads(data)
      self.annotations = self.obj['annotations']
      self.categories = self.obj['categories']
      # print(self.categories)
      # print(self.obj['annotations'][0].keys())

      # get range of indices of annotations for each image
      self.indices = []
      # print(self.annotations[0])
      i, j = 0, 0
      while i < len(self.annotations):
        j = i
        while j < len(self.annotations) and self.annotations[j]['image_id'] == self.annotations[i]['image_id']:
          j += 1
        self.indices.append(range(i, j))
        i = j
      # print(len(self.imgs))
      # print(self.indices[len(self.indices)-1])
      # print(self.indices)
      # print(len(self.annotations))

  def __getitem__(self, idx):
      if idx > len(self.indices) or idx < 0:
        print('{} {}'.format(self.root, idx))
      ann_range = self.indices[idx]

      current_annotation = self.annotations[ann_range.start]
      img_obj = self.obj['images'][self.annotations[ann_range.start]['image_id']]
      img_name = img_obj['file_name']
      img = Image.open(os.path.join(self.root, img_name))

      target = {}
      bbox = current_annotation['bbox']
      target["boxes"] = torch.as_tensor([([ann['bbox'][0], ann['bbox'][1], ann['bbox'][0]+ann['bbox'][2], ann['bbox'][1]+ann['bbox'][3]])
                                         for ann in self.annotations[ann_range.start:ann_range.stop]], dtype=torch.float32)
      target["labels"] = torch.tensor(list(
          ann['category_id'] for ann in self.annotations[ann_range.start:ann_range.stop]), dtype=torch.int64)
      target["image_id"] = torch.tensor([idx])
      target["area"] = torch.tensor(list(int(
          ann['area']) for ann in self.annotations[ann_range.start:ann_range.stop]), dtype=torch.int64)
      target["iscrowd"] = torch.tensor(list(
          ann['iscrowd'] for ann in self.annotations[ann_range.start:ann_range.stop]), dtype=torch.int8)
      target["masks"] = torch.as_tensor(
          [[[False] * img.height] * img.width] * len(ann_range), dtype=torch.uint8)

      if self.transforms is not None:
          img, target = self.transforms(img, target)

      return img, target

  def __len__(self):
      return len(self.imgs)


class PennFudanDataset(torch.utils.data.Dataset):
    def __init__(self, root, transforms=None):
        self.root = root
        self.transforms = transforms
        # load all image files, sorting them to
        # ensure that they are aligned
        self.imgs = list(sorted(os.listdir(os.path.join(root, "PNGImages"))))
        self.masks = list(sorted(os.listdir(os.path.join(root, "PedMasks"))))

    def __getitem__(self, idx):
        # load images ad masks
        img_path = os.path.join(self.root, "PNGImages", self.imgs[idx])
        mask_path = os.path.join(self.root, "PedMasks", self.masks[idx])
        img = Image.open(img_path).convert("RGB")
        # note that we haven't converted the mask to RGB,
        # because each color corresponds to a different instance
        # with 0 being background
        mask = Image.open(mask_path)

        mask = np.array(mask)
        # instances are encoded as different colors
        obj_ids = np.unique(mask)
        # first id is the background, so remove it
        obj_ids = obj_ids[1:]

        # split the color-encoded mask into a set
        # of binary masks
        masks = mask == obj_ids[:, None, None]
        # print('{} {} {} {}'.format(type(masks), len(masks), len(masks[0]), len(masks[0][0])))

        # get bounding box coordinates for each mask
        num_objs = len(obj_ids)
        boxes = []
        for i in range(num_objs):
            pos = np.where(masks[i])
            xmin = np.min(pos[1])
            xmax = np.max(pos[1])
            ymin = np.min(pos[0])
            ymax = np.max(pos[0])
            boxes.append([xmin, ymin, xmax, ymax])

        boxes = torch.as_tensor(boxes, dtype=torch.float32)
        # there is only one class
        labels = torch.ones((num_objs,), dtype=torch.int64)
        masks = torch.as_tensor(masks, dtype=torch.uint8)

        image_id = torch.tensor([idx])
        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])
        # suppose all instances are not crowd
        iscrowd = torch.zeros((num_objs,), dtype=torch.int64)

        target = {}
        target["boxes"] = boxes
        # print(target['boxes'])
        target["labels"] = labels
        target["masks"] = masks
        target["image_id"] = image_id
        target["area"] = area
        target["iscrowd"] = iscrowd

        if self.transforms is not None:
            img, target = self.transforms(img, target)

        return img, target

    def __len__(self):
        return len(self.imgs)


dataset = ChessDataset('train/')
d = dataset[4]
# print(d)
dataset = ChessDataset('valid/')
d = dataset[4]
# print(d)
# dataset = PennFudanDataset('PennFudanPed/')
# print(dataset[0])

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def get_instance_segmentation_model(num_classes):
    # load an instance segmentation model pre-trained on COCO
    model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)

    # get the number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask,
                                                       hidden_layer,
                                                       num_classes)

    return model

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def get_transform(train):
    transforms = []
    # converts the image, a PIL image, into a PyTorch Tensor
    transforms.append(T.ToTensor())
    if train:
        # during training, randomly flip the training images
        # and ground-truth for data augmentation
        transforms.append(T.RandomHorizontalFlip(0.5))
    return T.Compose(transforms)

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
