struct Solution {}

impl Solution {
    pub fn are_connected(n: i32, threshold: i32, queries: Vec<Vec<i32>>) -> Vec<bool> {
        struct union_find {
            s: Vec<i32>,
        }

        impl union_find {
            fn new(n: i32) -> Self {
                let mut s: Vec<i32> = Vec::new();
                for i in 0..=n {
                    s.push(i);
                }
                union_find { s }
            }

            fn find(&mut self, i: i32) -> i32 {
                if self.s[i as usize] != i {
                    self.s[i as usize] = self.find(self.s[i as usize]);
                }
                self.s[i as usize]
            }

            fn union(&mut self, i: i32, j: i32) {
                let x = self.find(i);
                let y = self.find(j);
                if x != y {
                    self.s[x as usize] = y;
                }
            }
        }

        let mut res: Vec<bool> = Vec::new();

        let mut uf: union_find = union_find::new(n);
        // let mut processed: Vec<bool> = vec![false; (n as usize + 1) * (n as usize + 1)];

        let mut i = threshold + 1;
        while i * 2 <= n {
            let mut j = i * 2;
            while j <= n {
                uf.union(i, j);
                j += i;
            }
            i += 1;
        }

        for query in &queries {
            if uf.find(query[0]) == uf.find(query[1]) {
                res.push(true);
            } else {
                res.push(false);
            }
        }

        res
    }
}

fn main() {
    for b in Solution::are_connected(6, 2, vec![vec![1, 4], vec![2, 5], vec![3, 6]]).iter() {
        println!("{}", b);
    }

    // for i in (0..12).rev().step_by(3) {
    //     println!("{}", i);
    // }
}
