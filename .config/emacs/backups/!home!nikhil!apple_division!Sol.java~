import java.util.*;
import java.io.*;

class Sol {
    private static long result = Long.MAX_VALUE;
    private static long total = 0;

    public static void main(String[] args) {
        Kattio kattio = new Kattio();
        int N = kattio.nextInt();
        int[] weights = new int[N];

        for (int i = 0; i < N; i++) {
            weights[i] = kattio.nextInt();
	    total += weights[i];  // calculate the total weight of all apples
        }

        completeSearch(weights, 0, N, 0);
	System.out.println(result);
    }

    public static void completeSearch(int[] weights, int i, int N, long currentSum) {
        if (i == N) {
	    result = Math.min(result, Math.abs(total - currentSum) - currentSum);
        } else {
	    // option 1: not adding current index
            completeSearch(weights, i + 1, N, currentSum);

	    // option 2: adding current index
	    currentSum += weights[i];
            completeSearch(weights, i + 1, N, currentSum);
	    // undo option 2
	    currentSum -= weights[i];
        }
    }

    static class Kattio extends PrintWriter {
        private BufferedReader r;
		private StringTokenizer st;

		// standard input
		public Kattio() { this(System.in, System.out); }
		public Kattio(InputStream i, OutputStream o) {
			super(o);
			r = new BufferedReader(new InputStreamReader(i));
		}
		// USACO-style file input

		public Kattio(String problemName) throws IOException {
			super(new FileWriter(problemName + ".out"));
			r = new BufferedReader(new FileReader(problemName + ".in"));
		}
        
		// returns null if no more input
		public String next() {
			try {
				while (st == null || !st.hasMoreTokens())
					st = new StringTokenizer(r.readLine());
				return st.nextToken();
			} catch (Exception e) { }
			return null;
		}
        
		public int nextInt() { return Integer.parseInt(next()); }
		public double nextDouble() { return Double.parseDouble(next()); }
		public long nextLong() { return Long.parseLong(next()); }
	}
}
