class MLP(nn.Module):
    def __init__(self):
        super().__init__()
        self.layers = nn.Sequential(
            nn.Flatten(),
            nn.Linear(32 * 32 * 3, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 10)
        )

    def forward(self, x):
        '''Forward pass'''
        return self.layers(x)


def get_instance_segmentation_model(num_classes):
    # load an instance segmentation model pre-trained on COCO
    model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)

    # get the number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)
    model.roi_heads.position_predictor = MLP()
    # model.roi_heads.box_predictor2 = FastRCNNPredictor(in_features, num_classes2)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask,
                                                       hidden_layer,
                                                       num_classes)

    return model


def get_transform(train):
    transforms = []
    # converts the image, a PIL image, into a PyTorch Tensor
    transforms.append(T.ToTensor())
    if train:
        # during training, randomly flip the training images
        # and ground-truth for data augmentation
        transforms.append(T.RandomHorizontalFlip(0.5))
    return T.Compose(transforms)


# use our dataset and defined transformations
dataset = ChessDataset('train/', '_annotations.coco.json', get_transform(train=True))
dataset_test = ChessDataset('valid/', '_annotations.coco.json', get_transform(train=False))
char_dataset = ChessDataset('train/', '_characters_annotations.coco.json', get_transform(train=True))
char_dataset_test = ChessDataset('train/', '_characters_annotations.coco.json', get_transform(train=False))
# PennFudanPed
# dataset = PennFudanDataset('PennFudanPed', get_transform(train=True))
# dataset_test = PennFudanDataset('PennFudanPed', get_transform(train=False))

# for i in range(len(char_dataset)):
#     a = char_dataset[i][1]
#     del a['masks']
#     print(a)

# split the dataset in train and test set
torch.manual_seed(1)
indices = torch.randperm(len(dataset)).tolist()
indices_test = torch.randperm(len(dataset_test)).tolist()
dataset_ = torch.utils.data.Subset(dataset, indices[:len(indices) // 2])
dataset_test_ = torch.utils.data.Subset(dataset_test, indices_test)

torch.manual_seed(2)
char_indices = torch.randperm(len(char_dataset)).tolist()
char_indices_test = torch.randperm(len(char_dataset_test)).tolist()
char_dataset_ = torch.utils.data.Subset(char_dataset, char_indices[1:])
char_dataset_test_ = torch.utils.data.Subset(char_dataset_test, char_indices_test[:1])

# define training and validation data loaders
data_loader = torch.utils.data.DataLoader(
    dataset_, batch_size=2, shuffle=True, num_workers=0,
    collate_fn=utils.collate_fn)

data_loader_test = torch.utils.data.DataLoader(
    dataset_test_, batch_size=1, shuffle=False, num_workers=0,
    collate_fn=utils.collate_fn)

char_data_loader = torch.utils.data.DataLoader(
    char_dataset_, batch_size=2, shuffle=True, num_workers=0,
    collate_fn=utils.collate_fn)

char_data_loader_test = torch.utils.data.DataLoader(
    char_dataset_test_, batch_size=1, shuffle=False, num_workers=0,
    collate_fn=utils.collate_fn)

# device = torch.device(
#     'cuda') if torch.cuda.is_available() else torch.device('cpu')
device = torch.device('cpu')
# device = torch.device('cuda')

# our dataset has two classes only - background and person
num_classes = 14
num_classes2 = 18

# get the model using our helper function
model = get_instance_segmentation_model(num_classes)
model2 = get_instance_segmentation_model(num_classes2)
# move model to the right device
model.to(device)
model2.to(device)

# construct an optimizer
params = [p for p in model.parameters() if p.requires_grad]
optimizer = torch.optim.SGD(params, lr=0.005,
                            momentum=0.9, weight_decay=0.0005)

params2 = [p for p in model2.parameters() if p.requires_grad]
optimizer2 = torch.optim.SGD(params2, lr=0.005,
                            momentum=0.9, weight_decay=0.0005)

# and a learning rate scheduler which decreases the learning rate by
# 10x every 3 epochs
lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,
                                               step_size=3,
                                               gamma=0.1)

lr_scheduler2 = torch.optim.lr_scheduler.StepLR(optimizer2,
                                               step_size=3,
                                               gamma=0.1)

# number of epochs to train for
num_epochs = 20
# if os.path.isfile('./model_{}epoch_statedict'.format(num_epochs)):
model.load_state_dict(torch.load(
    './model_{}epoch_statedict'.format(num_epochs), map_location=device))

num_epochs2 = 3
model2.load_state_dict(torch.load(
    './char_model_{}epoch_statedict'.format(num_epochs2), map_location=device))
# else:
# for epoch in range(num_epochs2):
#     # train for one epoch, printing every 10 iterations
#     train_one_epoch(model2, optimizer2, char_data_loader,
#                     device, epoch, print_freq=1)
#     # update the learning rate
#     lr_scheduler2.step()
#     # evaluate on the test dataset
#     evaluate(model2, char_data_loader_test, device=device)

# torch.save(model2.state_dict(), 'char_model_{}epoch_statedict'.format(num_epochs2))
