#include <algorithm>
#include <array>
#include <bitset>
#include <cmath>
#include <cstring>
#include <fstream>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <unordered_set>
#include <vector>

#ifndef DEBUG
auto &fin = std::cin;
auto &fout = std::cout;
#else
auto fin = std::ifstream("input.txt");
auto fout = std::ofstream("output.txt");
#endif

short state[1005][1005];  // 0: empty, 1: auxilary , 2: cow there
short adj[1005][1005];
int res = 0;

void check(int x, int y) {
  if (adj[x][y] == 3) {
    int dx = 0, dy = 0;
    if (state[x + 1][y] != 2)
      dx = 1;
    else if (state[x - 1][y] != 2)
      dx = -1;
    else if (state[x][y + 1] != 2)
      dy = 1;
    else if (state[x][y - 1] != 2)
      dy = -1;

    if (state[x + dx][y + dy] == 0) {
      state[x + dx][y + dy] = 1;
      ++res;
    }
  }
}

int main() {
  int N;
  fin >> N;

  std::memset(state, 0, sizeof(state));
  std::memset(adj, 0, sizeof(adj));

  for (int i = 0; i < N; ++i) {
    int x, y;
    fin >> x >> y;
    x += 2;
    y += 2;

    adj[x - 1][y]++;
    adj[x + 1][y]++;
    adj[x][y + 1]++;
    adj[x][y - 1]++;

    if (adj[x][y] == 3) {
      int dx = 0, dy = 0;
      if (state[x + 1][y] != 2)
        dx = 1;
      else if (state[x - 1][y] != 2)
        dx = -1;
      else if (state[x][y + 1] != 2)
        dy = 1;
      else if (state[x][y - 1] != 2)
        dy = -1;
      res++;
      state[x + dx][y + dy] = 1;
    }
    if (state[x][y] == 1) --res;
    state[x][y] = 2;

    check(x + 1, y);
    check(x - 1, y);
    check(x, y + 1);
    check(x, y - 1);

    fout << res << "\n";
  }

  return 0;
}
