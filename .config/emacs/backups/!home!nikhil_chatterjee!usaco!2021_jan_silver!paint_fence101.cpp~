#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <set>

struct pair_hash {
    inline std::size_t operator()(const std::pair<int,int> & v) const {
        return v.first*31+v.second;
    }
};

std::vector<int> solve(int n, int q,
                       const std::vector<std::pair<int, int>> &queries, int max_size, const std::string &fence) {
  // std::vector<std::vector<int>> ans(n, std::vector<int>(n, 0));
  // std::unordered_map<std::pair<int, int>, int, pair_hash> answers;
  // std::unordered_set<std::pair<int, int>, pair_hash> query_sets;
  std::map<std::pair<int, int>, int> answers;
  std::set<std::pair<int, int>> query_sets;
  for (int i = 0; i < q; ++i) {
    if (queries[i].first > 0) query_sets.insert({0, queries[i].first-1});
    if (queries[i].second < n - 1)
      query_sets.insert({queries[i].second + 1, n-1});
  }

  for (int i = 0; i < n; ++i) {
    std::vector<int> rights(26, -1);
    int min = fence[i];
    int ans = 1;
    for (int j = i; j < n; ++j) {
      int res;
      int last = fence[j], sec_last = fence[j - 1];
      
      if (i == j) res = 1;
      else if (last > sec_last || last < min) res = ans + 1;
      else if (last == sec_last || last == min) res = ans;
      else {
        // auto &rights = poses[i][j-1];
        // if (!rights.count(last-'A')) res = ans[i][j-1] + 1;
        if (rights[last-'A'] < 0) res = ans + 1;
        else {
          bool found = false;
          for (int l = 0; l < last-'A'; ++l) {
            if (rights[last - 'A'] < rights[l]) {
              // if (rights.count(l))
              // if (rights.at(last - 'A') < rights.at(l)) {
              res = ans + 1;
              found = true;
              break;
            }
          }
          if (!found) res = ans;
        }
      }

      if (query_sets.count({i, j})) answers[{i, j}] = res;
      ans = res;

      // if (i != j) 
      //   poses[i][j] = poses[i][j-1];
      // poses[i][j][last-'A'] = j;
      rights[last-'A'] = j;
      min = std::min(min, last);
    }
  }

  std::vector<int> res;
  for (int i = 0; i < q; ++i) {
    // std::cout << ans[0][queries[i].first-1] + ans[queries[i].second+1][n-1] << std::endl;
    // int result = 0;
    // if (queries[i].first > 0) result += ans[0][queries[i].first-1];
    // if (queries[i].second < n - 1) result += ans[queries[i].second+1][n-1];
    // res.push_back(result);

    res.push_back(answers[{0, queries[i].first-1}] + answers[{queries[i].second+1, n-1}]);
  }

  return res;
}

float get_rand(float min, float max) {
  static std::random_device rd;
  static std::mt19937_64 gen(rd());
  static std::uniform_real_distribution<double> urd(0, 1);
  return urd(gen) * (max - min) + min;
}

int main(int argc, char *argv[]) {
  int n, q;
  std::cin >> n >> q;

  std::string fence;
  std::cin >> fence;

  std::vector<std::pair<int, int>> queries;
  int max_size = -1;
  for (int i = 0; i < q; ++i) {
    int a, b;
    std::cin >> a >> b;
    queries.push_back({a-1, b-1});
    max_size = std::max(max_size, a-1);
    max_size = std::max(max_size, n-b-1);
  }

  auto res = solve(n, q, queries, max_size, fence);
  for (int i = 0; i < res.size(); ++i) {
    std::cout << res[i] << std::endl;
  }

  // int n = 5000, q = 50000;
  // std::string fence;
  
  // for (int i = 0; i < n; ++i) {
  //   fence.push_back(get_rand(0, 26) + 'A');
  // }
  // // fence = "GCHXP";
  // std::vector<std::pair<int, int>> queries;
  // int max_size = -1;
  // for (int i = 0; i < q; ++i) {
  //   int a = get_rand(0, n);
  //   int b = get_rand(a, n);
  //   queries.push_back({a, b});
  //   max_size = std::max(max_size, a-1);
  //   max_size = std::max(max_size, n-b-1);
  // }

  // // std::cout << fence << std::endl;
  // auto res = solve(n, q, queries, max_size, fence);
  // // for (int i = 0; i < q; ++i) {
  // //   std::cout << queries[i].first << ' ' << queries[i].second << std::endl;
  // // }
  // for (int i = 0; i < res.size(); ++i) {
  //   std::cout << res[i] << std::endl;
  // }

  return 0;
}
