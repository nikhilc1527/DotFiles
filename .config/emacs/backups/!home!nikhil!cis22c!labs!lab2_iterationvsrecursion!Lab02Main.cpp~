/*
 * Nikhil Chatterjee
 * CIS 22C - Manish Goel
 * Lab 2
 * main.cpp
 * Description: A program that gets a list of numbers from the user, and uses
 * two different methods - iterative and recursive - to check whether or not all
 * of the numbers given are prime PSEUDOCODE:
 * 1. Take input of the size of the input list from the user, making sure that
 * the input is between 1 and 16
 * 2. Take input of the amount of numbers that the user inputs, and store them
 * in an array, making sure that each input number is between 1 and 99
 * 3. Call the iterative method for checking if all numbers are prime
 * -- Keep an array of booleans which signifies which number is prime and which
 * is not
 * -- Create through each number, and for each multiple of the number, set the
 * value of the boolean array at that
 * -- position to false
 * -- Loop through each input number, and check against the boolean array to
 * find if the number is prime or not
 * 4. Call the recursive method for checking if all numbers are prime
 * -- Create an array of booleans which signifies which number is prime and
 * which is not
 * -- Recursive method findIsPrime is called from starting value of i at 2, and
 * a base case of i at the end of the valid input size
 * ---- For each recursion, setFalse method is called to set all multiples of
 * the current value to false, because any number that is a multiple of some
 * other number is not prime
 * -- Each input number is checked recursively against the boolean array to
 * check if it is prime or not
 */

#include <cstring>
#include <iostream>

/*
 * Checks if all input values are prime iteratively
 * Pre: None
 * Post: None
 * Parameters: input array of numbers, length of input
 * Returns: whether or not all values in the input are primes
 */
bool isArrayPrimeIter(int *array, std::size_t length) {
  std::cout << "Entering "
            << "isArrayPrimeIter(int*, size_t)"
            << "\n";

  bool *is_prime = new bool[100];
  std::memset(is_prime, true, 100 * sizeof(bool));
  is_prime[1] = false;
  for (int i = 2; i < 100; ++i) {
    if (!is_prime[i]) {
      continue;
    }
    for (int j = i * 2; j < 100; j += i) {
      is_prime[j] = false;
    }
  }

  for (int i = 0; i < length; ++i) {
    if (!is_prime[array[i]]) {
      delete[] is_prime;
      std::cout << "Leaving "
                << "isArrayPrimeIter(int*, size_t)"
                << "\n";
      return false;
    }
  }

  delete[] is_prime;
  std::cout << "Leaving "
            << "isArrayPrimeIter(int*, size_t)"
            << "\n";
  return true;
}

/*
 * Checks each value of the input array against the is_prime boolean array
 * Pre: is_prime must be filled properly, with the value at each index
 * signifying whether or not that index is prime
 * Post: None Parameters: input array, input array size, is_prime array
 * Returns: whether or not the current and subsequent value of the input array is all prime
 */
bool isArrayPrimeRecur(int *array, std::size_t length, bool *is_prime) {
  std::cout << "Entering "
            << "isArrayPrimeRecur(int*, size_t, bool*)"
            << "\n";
  if (length <= 0) {
    std::cout << "Leaving "
              << "isArrayPrimeRecur(int*, size_t, bool*)"
              << "\n";
    return true;
  }
  if (!is_prime[array[0]]) {
    std::cout << "Leaving "
              << "isArrayPrimeRecur(int*, size_t, bool*)"
              << "\n";
    return false;
  }
  auto result = isArrayPrimeRecur(array + 1, length - 1, is_prime);
  std::cout << "Leaving "
            << "isArrayPrimeRecur(int*, size_t, bool*)"
            << "\n";
  return result;
}

/*
 * Sets the is_prime value at each multiple of some number to false, since multiples of any number cannot be prime
 * Pre: None 
 * Post: is_prime is updated for the current value
 * Parameters: is_prime array, size of is_prime array, the current index, and offset to jump by
 * Returns: None
 */
void setFalse(bool *arr, int length, int i, int offset) {
  std::cout << "Entering "
            << "setFalse(bool*, int, int)"
            << "\n";
  if (i >= length) {
    std::cout << "Leaving "
              << "setFalse(bool*, int, int)"
              << "\n";
    return;
  }
  arr[i] = false;
  setFalse(arr, length, i + offset, offset);
  std::cout << "Leaving "
            << "setFalse(bool*, int, int)"
            << "\n";
}

/*
 * Finds all values of the is_prime array, making use of the setFalse function
 * Pre: None
 * Post: is_prime is fully constructed with the values of all indices reflecting the true nature of the primeness of the index 
 * Parameters: is_prime array, size of is_prime array, index at which to check 
 * Returns: None
 */
void findIsPrime(bool *is_prime, std::size_t length, int i) {
  std::cout << "Entering "
            << "findIsPrime(bool*, size_t, int)"
            << "\n";
  if (i >= length) {
    return;
  }
  if (is_prime[i]) {
    setFalse(is_prime, length, i * 2, i);
  }
  findIsPrime(is_prime, length, i + 1);
  std::cout << "Leaving "
            << "findIsPrime(bool*, size_t, int)"
            << "\n";
}

/*
 * Checks if all input values are prime iteratively
 * Pre: None
 * Post: None
 * Parameters: input array, size of input array
 * Returns: whether or not all values in the input array are prime
 */
bool isArrayPrimeRecur(int *array, std::size_t length) {
  std::cout << "Entering "
            << "isArrayPrimeRecur(int*, size_t)"
            << "\n";
  int prime_length = 100;
  bool *is_prime = new bool[prime_length];
  std::memset(is_prime, true, prime_length * sizeof(bool));
  is_prime[1] = false;
  findIsPrime(is_prime, prime_length, 2);
  bool result = isArrayPrimeRecur(array, length, is_prime);

  std::cout << "Leaving "
            << "isArrayPrimeRecur(int*, size_t)"
            << "\n";
  delete[] is_prime;
  return result;
}

/*
 * Main function, runs the program to use two different methods to check if all
 * values in an inputted list are prime or not
 * Pre: None 
 * Post: Whether or not all input values are prime is outputted to the terminal
 * Parameters: Command line arguments, number of command line arguments
 * Returns: Exit value of program 
 * Terminal Input: size of input array, values in input array 
 * Terminal Output: result of each method checking if all values in input array are prime
 */
int main(int argc, char **argv) {
  const int MAX_ARRAY_LENGTH = 16, MAX_NUM_SIZE = 100;
  int size;
  do {
    std::cout << "Please pick a number between 1 and 16 which represents the "
                 "size of the input array"
              << ": ";
    std::cin >> size;
  } while (size < 1 || size > MAX_ARRAY_LENGTH);

  int *nums = new int[size];
  for (int i = 0; i < size; ++i) {
    int num;
    do {
      std::cout
          << "Please input a number which you want to test for being prime"
          << ": ";
      std::cin >> num;
    } while (num < 1 || num > 99);
    nums[i] = num;
  }

  std::cout << "\n";

  bool iter_res = isArrayPrimeIter(nums, size);
  bool recur_res = isArrayPrimeRecur(nums, size);

  std::cout << "\n";

  std::cout << "Iterative method says that " << (iter_res ? "" : "NOT ")
            << "all numbers inputted are prime.\n";
  std::cout << "Recursive method says that " << (recur_res ? "" : "NOT ")
            << "all numbers inputted are prime.\n";

  delete[] nums;

  std::cout << "Thank you for using this program. Please come again!"
            << "\n";

  return 0;
}
