#include <bits/stdc++.h>

using namespace std;

int main(int argc, char **argv) {
  freopen("angry.in", "r", stdin);
  freopen("angry.out", "w", stdout);
  
  int N; cin >> N;
  vector<int> positions(N);
  for (int i = 0; i < N; ++i) {
    cin >> positions[i];
    // positions[i] *= 2;
  }
  sort(positions.begin(), positions.end());

  vector<int> left_dp(N), right_dp(N);
  left_dp[0] = -2;
  right_dp[N-1] = -2;
  
  for (int i = 1; i < N; ++i) {
    left_dp[i] = max<double>(left_dp[i-1]+1, positions[i]-positions[i-1]);
  }

  for (int i = N-2; i >= 0; --i) {
    right_dp[i] = max<double>(right_dp[i+1]+1, positions[i+1]-positions[i]);
  }

  // double result = 1e9;
  // for (int i = 0; i < N - 1; ++i) {
  //   result = min(result, max<double>({left_dp[i]+2, right_dp[i+1]+2, (positions[i+1]-positions[i])/2.0}));
  // }

  // cout << result;
  // if (result == (double)((int)result)) {
  //   cout << ".0";
  // }
  // cout << "\n";

  double lo = 0;
  double hi = 1e9;
  // while (i < j) {
  //   result = min(result, max((positions[j] - positions[i]) / 2, 2 + max(left_dp[i], right_dp[j])));
  //   // if (DP[0][i + 1] < DP[1][j - 1]) {
  //     if (left_dp[i+1] < right_dp[j-1]) {
        
      
  //     i++;
  //   } else {
  //     j--;
  //   }
  // }

  // for (int i = 0; i < N; ++i) {
  //   cout << positions[i] << "  ";
  // }
  // cout << "\n";

  // for (int i = 0; i < N; ++i) {
  //   cout << left_dp[i] << "  ";
  // }
  // cout << "\n";

  // for (int i = 0; i < N; ++i) {
  //   cout << right_dp[i] << "  ";
  // }
  // cout << "\n";

  while (lo <= hi - 0.01) {
    auto mid = (lo+hi)/2.0;
    if (hi < 30) {
      int a = 5;
    }
    bool good = false;
    for (int i = 0; i < N-1 && !good; ++i) {
      if (mid >= left_dp[i] && mid >= right_dp[i+1] && mid >= ceil((positions[i+1] - positions[i])/2.0)) {
        good = true;
        cout << "good for position " << i << "\n";
      }
    }

    if (good) {
      hi = mid - 0.01;
    } else {
      lo = mid + 0.01;
    }
  }

  hi += 0.01;

  hi = round(hi * 10) / 10.0;

  cout << fixed;
  cout << static_cast<int>(hi) << "." << (static_cast<int>(hi - static_cast<int>(hi))) << '\n';
  // cout << hi << "\n";
  
  return 0;
}

