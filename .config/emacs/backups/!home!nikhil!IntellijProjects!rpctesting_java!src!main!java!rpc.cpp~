/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class Main */

  #include <rpc/client.h>

#include <vector>

#include <iostream>

#ifndef _Included_Main
#define _Included_Main
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     Main
 * Method:    callRpc
 * Signature: ()[B
 */
  
JNIEXPORT jbyteArray JNICALL Java_Main_callRpc
  (JNIEnv *jenv, jobject obj) {

  rpc::client client("localhost", 8080);

  std::cout << "getting bytes" << "\n";
  
  auto bytesarr = client.async_call("get_bytes").get().as<std::vector<std::uint8_t>>();
  
  jbyteArray bytearr = jenv->NewByteArray(20);
  jboolean iscopy;
  jbyte* bytes = jenv->GetByteArrayElements(bytearr, &iscopy);

  // auto bytesarr = get_bytes();

  for (auto i = 0; i < bytesarr.size(); ++i) {
    bytes[i] = bytesarr[i];
  }
  
  jenv->ReleaseByteArrayElements(bytearr, bytes, 0);

  return bytearr;
  }

#ifdef __cplusplus
}
#endif
#endif
// g++ -std=c++20 --shared -I/usr/lib/jvm/default/include/ -I/usr/lib/jvm/default/include/linux/ rpc.cpp -o lib.so -fPIC
